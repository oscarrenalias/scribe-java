<?xml version="1.0" encoding="utf-8"?>
<project name="core" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:scala="antlib:org.scala.ant"
         xmlns:groovy="antlib:org.codehaus.groovy.ant"
         xmlns:catalina="antlib:org.apache.catalina.ant">

  
  <!--
      ant is a rather odd (to a java, or any non-function language
      coder) in that all properties (variables in ant speak) are
      immutable. This means first definition wins. The general model
      here is that first the target project (build.xml) gets it's
      chance to then this file. Ant consider the build command line to
      be first, then build skeleton first loads
      ~/.ant/${project.name}.properties, then ./build.properties then
      any defined here. Depending on the desired target you can build
      a war or a jar and switch back and forth between the two.
       
       This build system supports mixed scala/java/groovy, jar
       targets, war targets and local .m2 publishing. Also groovy
       scripts can be embedded or invoked by name. Each area is mostly
       stand alone and could be broken out into it's own file if needed
       or desired.
  -->

  <property file="${user.home}/.ant/${project.name}.custom.properties"/>
  <property file="${project.dir}/build.properties"/>

  <!-- code source and resources -->
  <property name="src.dir" value="${project.dir}/src/main"/>
  <!-- in order to build mixed project we compile scala code first and
       give scalac the java code as well. -->
  <property name="scala.src.dir" value="${src.dir}"/>
  <property name="java.src.dir" value="${src.dir}/java"/>
  <property name="groovy.src.dir" value="${src.dir}/java"/>
  <property name="resources.dir" value="${src.dir}/resources"/>
  <!-- unit test -->
  <property name="test.src.dir" value="${project.dir}/src/test"/>
  <property name="java.test.dir" value="${test.src.dir}/java"/>
  <property name="groovy.test.dir" value="${test.src.dir}/java"/>
  <property name="scala.test.dir" value="${test.src.dir}"/>
  <!-- artifact creation -->
  <property name="target.dir" value="${project.dir}/target"/>
  <!-- web sources -->
  <property name="webapp.src.dir" value="${src.dir}/webapp"/>
  <!-- war -->
  <property name="war.dir" value="${target.dir}/war"/>
  <property name="webinf.dir" value="${war.dir}/WEB-INF"/>
  <property name="war.classes.dir" value="${webinf.dir}/classes"/>
  <property name="war.lib.dir" value="${webinf.dir}/lib"/>

  <property name="ivy.jar.name" value="ivy-${ivy.jar.version}.jar"/>
  <!-- put jar in ~/.ant/lib where it will be autoloaded -->
  <property name="ivy.home" value="${user.home}/.ant/lib"/>

  <available property="ivy.installed" classname="org.apache.ivy.Ivy"/>

  <target name="prepare.ivy" unless="ivy.installed">
    <mkdir dir="${ivy.home}"/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.jar.version}/${ivy.jar.name}"
         dest="${ivy.home}/${ivy.jar.name}"/>
  </target>

  <target name="load.ivy" depends="prepare.ivy">
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant"/>
  </target>

  <target name="load.catalina">
    <taskdef resource="org/apache/catalina/ant/antlib.xml"
             uri="antlib:org.apache.catalina.ant">
      <classpath>
        <pathelement path="${tomcat.dir}/lib/catalina-ant.jar"/>
        <pathelement path="${tomcat.dir}/lib/tomcat-coyote.jar"/>
        <pathelement path="${tomcat.dir}/lib/tomcat-util.jar"/>
        <pathelement path="${tomcat.dir}/bin/tomcat-juli.jar"/>
      </classpath>
    </taskdef>
  </target>

  <target name="load.groovy" depends="prepare">
    <taskdef resource="org/codehaus/groovy/antlib.xml"
             uri="antlib:org.codehaus.groovy.ant">
      <classpath>
        <path refid="groovy.classpath"/>
      </classpath>
    </taskdef>
  </target>

  <target name="load.scalac" depends="prepare">
    <taskdef resource="scala/tools/ant/antlib.xml"
             uri="antlib:org.scala.ant">
      <classpath>
        <path refid="scalac.classpath"/>
      </classpath>
    </taskdef>
  </target>

  <target name="_compile.groovy" depends="load.groovy">
    <groovy:groovyc srcdir="${groovy.src.dir}"
                    destdir="${target.dir}/classes"
                    includeAntRuntime="false"
                    classpathref="compile.classpath">
      <classpath>
        <path refid="compile.classpath"/>
      </classpath>
      <javac debug="${debug}"/>
    </groovy:groovyc>
  </target>

  <target name="_compile.scala" depends="load.scalac">
    <scala:scalac srcdir="${scala.src.dir}"
                  destdir="${target.dir}/classes"
                  classpathref="compile.classpath">
      <include name="scala/**/*.scala"/>
      <include name="java/**/*.java"/>
    </scala:scalac>
  </target>

  <target name="compile" depends="_compile.scala,_compile.groovy"/>

  <target name="_compile.test.scala" depends="load.scalac">
    <scala:scalac srcdir="${test.src.dir}"
                  destdir="${target.dir}/test/classes"
                  classpathref="unittest.classpath">
      <include name="**/*.scala"/>
      <include name="**/*.java"/>
    </scala:scalac>
  </target>

  <target name="_compile.test.groovy" depends="load.groovy" >
    <groovy:groovyc srcdir="${test.src.dir}"
                    destdir="${target.dir}/test/classes"
                    includeantruntime="false">
      <classpath>
        <path refid="unittest.classpath"/>
      </classpath>
      <javac debug="${debug}"/>
    </groovy:groovyc>
  </target>

  <target name="_compile.test" depends="_compile.test.scala,_compile.test.groovy"/>

  <target name="_singletest" if="test.class">
    <junit fork="true" forkmode="once" haltonerror="false" haltonfailure="false">
      <classpath>
        <path refid="unittest.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <test todir="${target.dir}/reports" name="${test.class}"/>
    </junit>
  </target>

  <target name="_batchtest" unless="test.class">
    <junit printsummary="true">
      <classpath>
        <path refid="unittest.classpath"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${target.dir}/reports">
        <fileset dir="${test.src.dir}/java">
          <include name="**/*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test" depends="_compile.test,_batchtest,_singletest"/>

  <target name="clean">
    <delete dir="${target.dir}"/>
  </target>

  <target name="_fs.prepare">
    <mkdir dir="${target.dir}"/>
    <mkdir dir="${target.dir}/classes"/>
    <mkdir dir="${target.dir}/test/classes"/>
    <mkdir dir="${target.dir}/reports"/>
  </target>

  <target name="_resolve.prepare" depends="load.ivy">
    <ivy:settings file="${shared.dir}/ivysettings.xml"/>
    <ivy:resolve/>
  </target>

  <target name="_post.resolve.prepare" depends="_resolve.prepare">
    <ivy:cachepath pathid="scalac.classpath" conf="scalac"/>
    <ivy:cachepath pathid="groovy.classpath" conf="groovy"/>
    <ivy:cachepath pathid="ant.runtime.classpath" conf="runtime"/>
    <ivy:cachepath pathid="ant.compile.classpath" conf="compile"/>
    <ivy:cachepath pathid="ant.unittest.classpath" conf="unittest"/>
    <ivy:cachefileset setid="ant.runtime.fileset" conf="runtime"/>
  </target>

  <target name="_war.prepare" depends="prepare">
    <mkdir dir="${war.dir}"/>
    <mkdir dir="${webinf.dir}"/>
    <mkdir dir="${war.classes.dir}"/>
    <mkdir dir="${war.lib.dir}"/>
    <ivy:retrieve pattern="${war.lib.dir}/[artifact].[ext]" conf="webapp" sync="true"/>
    <copy todir="${war.classes.dir}">
      <fileset dir="${resources.dir}"/>
    </copy>
  </target>

  <target name="prepare" depends="_fs.prepare,_post.resolve.prepare"/>

  <target name="jar" depends="compile">
    <jar destfile="${target.dir}/${project.name}.jar">
      <fileset dir="${target.dir}/classes"/>
      <fileset dir="${resources.dir}"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
    <ivy:makepom ivyfile="${project.dir}/ivy.xml" pomfile="${target.dir}/${project.name}.pom">
      <mapping conf="compile" scope="compile"/>
      <mapping conf="runtime" scope="runtime"/>
    </ivy:makepom>
  </target>

  <target name="war" depends="compile,_war.prepare">
    <war destfile="${target.dir}/${project.name}.war"
         webxml="${webapp.src.dir}/WEB-INF/web.xml">
      <webinf dir="${webinf.dir}">
        <include name="*"/>
        <exclude name="**/*.jar"/>
        <exclude name="web.xml"/>
      </webinf>
      <classes dir="${target.dir}/classes"/>
      <lib dir="${war.lib.dir}"/>
    </war>
  </target>

  <target name="resources" depends="load.catalina">
    <catalina:resources url="${tomcat.manager.url}"/>
  </target>

  <target name="start" depends="load.catalina">
    <catalina:start url="${tomcat.manager.url}"
                    username="${manager.username}"
                    password="${manager.password}"
                    path="/${project.name}"/>
  </target>
 
  <target name="stop" depends="load.catalina">
    <catalina:stop url="${tomcat.manager.url}"
                   username="${manager.username}"
                   password="${manager.password}"
                   path="/${project.name}"/>
  </target>

  <target name="reload" depends="load.catalina">
    <catalina:reload url="${tomcat.manager.url}"
                       username="${manager.username}"
                       password="${manager.password}"
                       path="/${project.name}"/>
  </target>

  <target name="deploy" depends="load.catalina">
    <catalina:deploy url="${tomcat.manager.url}"
                     username="${manager.username}"
                     password="${manager.password}"
                     war="file:${target.dir}/${project.name}.war"
                     path="/${project.name}"/>
  </target>

  <target name="undeploy" depends="load.catalina">
    <catalina:undeploy url="${tomcat.manager.url}"
                     username="${manager.username}"
                     password="${manager.password}"
                     path="/${project.name}"/>
  </target>

  <target name="redeploy" depends="undeploy,deploy"/>

  <target name="run" depends="jar">
    <java jar="${target.dir}/${project.name}.jar"
          fork="true"
          classpathref="runtime.classpath"/>
  </target>

  <target name="install" depends="clean,compile,jar">
    <ivy:publish resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
      <artifacts pattern="${target.dir}/[artifact].[ext]"/>
    </ivy:publish>
  </target>

  <target name="all" depends="clean,compile,jar"/>

</project>
